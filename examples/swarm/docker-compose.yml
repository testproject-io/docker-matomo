version: "3.2"

services:
  traefik:
    image: traefik:${TRAEFIK_VERSION}
    command:
      - "--loglevel=${TRAEFIK_LOG_LEVEL}"
      - "--accesslog=true"
      - "--defaultentrypoints=http,https"
      - "--entryPoints=Name:http Address::80 Redirect.EntryPoint:https"
      - "--entryPoints=Name:https Address::443 TLS"
      - "--docker"
      - "--docker.exposedbydefault=false"
      - "--docker.swarmmode=true"
      - "--docker.domain=${FQDN}"
      - "--acme=true"
      - "--acme.acmelogging=true"
      - "--acme.email=webmaster@example.com"
      - "--acme.storage=acme.json"
      - "--acme.entryPoint=https"
      - "--acme.onhostrule=true"
      - "--acme.httpchallenge=true"
      - "--acme.httpchallenge.entrypoint=http"
    ports:
      - target: 80
        published: 80
        protocol: tcp
      - target: 443
        published: 443
        protocol: tcp
    volumes:
      - "${ROOT_DIR}/acme.json:/acme.json"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    deploy:
      placement:
        constraints: [node.role == manager]

  db:
    image: mariadb:${MARIADB_VERSION}
    command:
      - "mysqld"
      - "--log-warnings=2"
      - "--max-connections=${MYSQL_MAX_CONNECTIONS}"
      - "--max_allowed_packet=${MYSQL_MAX_ALLOWED_PACKET}"
      - "--wait-timeout=${MYSQL_WAIT_TIMEOUT}"
      - "--innodb-buffer-pool-size=${MYSQL_IDB_BUFFER_POOL_SIZE}"
      - "--innodb-buffer-pool-instances=${MYSQL_IDB_BUFFER_POOL_INSTANCES}"
    volumes:
      - "${ROOT_DIR}/db:/var/lib/mysql"
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      - "TZ=${TZ}"
      - "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}"
      - "MYSQL_DATABASE=${MYSQL_DATABASE}"
      - "MYSQL_USER=${MYSQL_USER}"
      - "MYSQL_PASSWORD=${MYSQL_PASSWORD}"
    deploy:
      placement:
        constraints: [node.role == worker]

  redis:
    image: redis:${REDIS_VERSION}
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      - "TZ=${TZ}"
    deploy:
      placement:
        constraints: [node.role == worker]

  matomo:
    image: crazymax/matomo:${MATOMO_VERSION}
    depends_on:
      - db
      - redis
    volumes:
      - "${ROOT_DIR}/app:/data"
    env_file:
      - "${ROOT_DIR}/matomo.env"
    deploy:
      mode: replicated
      replicas: ${MATOMO_REPLICAS}
      labels:
        - "traefik.enable=true"
        - "traefik.backend=matomo"
        - "traefik.backend.loadbalancer.stickiness=true"
        - "traefik.port=8000"
        - "traefik.frontend.rule=Host:${FQDN}"
        - "traefik.frontend.passHostHeader=true"
      placement:
        constraints: [node.role == worker]

  cron_archive:
    image: crazymax/matomo:${MATOMO_VERSION}
    command:
      - "php"
      - "/var/www/console"
      - "core:archive"
      - "--no-interaction"
      - "--url=https://${FQDN}/"
      - "--concurrent-requests-per-website=${MATOMO_ARCHIVE_REQUESTS}"
    user: nginx
    depends_on:
      - matomo
    volumes:
      - "${ROOT_DIR}/app:/data"
    env_file:
      - "${ROOT_DIR}/matomo.env"
    deploy:
      labels:
        - "swarm.cronjob.enable=true"
        - "swarm.cronjob.schedule=${MATOMO_CRON_ARCHIVE}"
        - "swarm.cronjob.skip-running=true"
      replicas: 0
      placement:
        constraints: [node.role == worker]
      restart_policy:
        condition: none

  cron_geoip:
    image: crazymax/matomo:${MATOMO_VERSION}
    command:
      - "/usr/local/bin/update_geoip"
    user: nginx
    depends_on:
      - matomo
    volumes:
      - "${ROOT_DIR}/app:/data"
    env_file:
      - "${ROOT_DIR}/matomo.env"
    deploy:
      labels:
        - "swarm.cronjob.enable=true"
        - "swarm.cronjob.schedule=${MATOMO_CRON_GEOIP}"
        - "swarm.cronjob.skip-running=true"
      replicas: 0
      placement:
        constraints: [node.role == worker]
      restart_policy:
        condition: none

  scheduler:
    image: crazymax/swarm-cronjob:${SWARM_CRONJOB_VERSION}
    depends_on:
      - cron_archive
      - cron_geoip
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    environment:
      - "TZ=${TZ}"
      - "LOG_LEVEL=info"
      - "LOG_NOCOLOR=true"
    deploy:
      placement:
        constraints:
          - node.role == manager
